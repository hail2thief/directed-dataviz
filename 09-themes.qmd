---
title: "09-themes"
format: html
---


```{r setup, include=FALSE}
# set knit options
knitr::opts_chunk$set(
  fig.width=9, 
  fig.height=5, 
  fig.retina=3,
  fig.align="center",
  out.width = "100%",
  cache = FALSE,
  echo = TRUE,
  message = FALSE, 
  warning = FALSE
)

```

Load libraries:

```{r}
library(tidyverse)
library(juanr)
library(socviz)
```








## Color


Use of color depends on whether the variable you are mapping to color or fill is continuous or discrete (categorical). 


Continuous:

```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = pop)) + 
  geom_point()
```

Categorical:

```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = pop_dens6)) + 
  geom_point()
```


To modify the color you can use a pre-existing color scale. For example `viridis`. 


Continuous:

```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = pop)) + 
  geom_point() + 
  scale_color_viridis_c(option = "magma", trans = "log")
```


Categorical:

```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = pop_dens6)) + 
  geom_point() + 
  scale_color_viridis_d(option = "magma")
```


In a lot of cases, categories look nicer. You can make categories out of continuous variables using handy functions like `cut_number()`:


```{r}
county_data |> 
  mutate(travel_cat = cut_number(travel_time, n = 5)) |> 
  ggplot(aes(x = black, y = hh_income, color = travel_cat)) + 
  geom_point() + 
  scale_color_viridis_d(option = "magma")
```





You can also manually provide colors, like this:


```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = partywinner16)) + 
  geom_point() + 
  scale_color_manual(values = c("blue", "red", "grey"))
```

Or like this:


```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = partywinner16)) + 
  geom_point() + 
  scale_color_manual(values = wesanderson::wes_palettes$Darjeeling1[1:3])
```


There's a great package called `paletteer` that compiles a huge number of color palettes:


```{r}
library(paletteer)


ggplot(drop_na(county_data), aes(x = per_dem_2016, fill = census_region)) + 
  geom_density() + 
  facet_wrap(vars(census_region)) + 
  scale_fill_paletteer_d(`"ghibli::KikiMedium"`)
```



## Themes


There are preset themes in R, like theme_bw:

```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = pop_dens6)) + 
  geom_point() + 
  scale_color_viridis_d(option = "magma") + 
  theme_bw()
```


Or theme_minimal:


```{r}
ggplot(county_data, aes(x = black, y = hh_income, color = pop_dens6)) + 
  geom_point() + 
  scale_color_viridis_d(option = "magma") + 
  theme_minimal()
```


They are altering all of the options found in `theme`. There are too many to go through here. A good starting approach is to begin with a preset theme you like and then modify it:


Here's a base plot to work from:

```{r}
p1 = elections |> 
  drop_na() |> 
  ggplot(aes(x = black, y = per_dem_2012, size = pop,
                      color = census_region)) + 
  geom_point() + 
  scale_x_continuous(labels = scales::percent_format(scale = 1)) + 
  scale_y_continuous(labels = scales::percent) + 
  labs(x = "Black population in county (%)", 
       y = "Democrat vote share in 2012 (%)",
       title = "Results of the 2012 Presidential Election",
       subtitle = "Data from {juanr}",
       color = NULL, size = "Population") + 
  facet_wrap(vars(census_region)) + 
  scale_size(labels = scales::comma)

p1
```


We can get rid of some of the grid lines by setting options to `element_blank()` (there are two kinds, major and minor):


```{r}
p1 + 
  theme_minimal() + 
  theme(panel.grid.major = element_blank())
```

We can also mess with the font size using these args:


```{r}
p1 + 
  theme_minimal(base_family = "Arial Narrow", base_size = 12) + 
  theme(panel.grid.major = element_blank())
```


We can then change the fontface of individual titles. These changes all taken from Andrew Heiss:


```{r}
p1 + 
  theme_minimal(base_family = "Arial Narrow", base_size = 12) + 
  theme(panel.grid.major = element_blank(),
        # Bold, bigger title
        plot.title = element_text(face = "bold", size = rel(1.7)),
        # Plain, slightly bigger subtitle that is grey
        plot.subtitle = element_text(face = "plain", size = rel(1.3), color = "grey70"),
        # Italic, smaller, grey caption that is left-aligned
        plot.caption = element_text(face = "italic", size = rel(0.7), 
                                    color = "grey70", hjust = 0),
        # Bold legend titles
        legend.title = element_text(face = "bold"),
        # Bold, slightly larger facet titles that are left-aligned for the sake of repetition
        strip.text = element_text(face = "bold", size = rel(1.1), hjust = 0),
        # Bold axis titles
        axis.title = element_text(face = "bold"),
        # Add some space above the x-axis title and make it left-aligned
        axis.title.x = element_text(margin = margin(t = 10), hjust = 0),
        # Add some space to the right of the y-axis title and make it top-aligned
        axis.title.y = element_text(margin = margin(r = 10), hjust = 1),
        strip.background = element_rect(fill = "grey90", color = NA),
        # Add a thin grey border around all the plots to tie in the facet titles
        panel.border = element_rect(color = "grey90", fill = NA))
```


A good thing to do to maintain consistency is to create one theme for a project, and store it as its own R script (`theme_heiss.R`):


```{r}
theme_heiss = function() {
  theme_minimal(base_family = "Arial Narrow", base_size = 12) + 
  theme(panel.grid.major = element_blank(),
        # Bold, bigger title
        plot.title = element_text(face = "bold", size = rel(1.7)),
        # Plain, slightly bigger subtitle that is grey
        plot.subtitle = element_text(face = "plain", size = rel(1.3), color = "grey70"),
        # Italic, smaller, grey caption that is left-aligned
        plot.caption = element_text(face = "italic", size = rel(0.7), 
                                    color = "grey70", hjust = 0),
        # Bold legend titles
        legend.title = element_text(face = "bold"),
        # Bold, slightly larger facet titles that are left-aligned for the sake of repetition
        strip.text = element_text(face = "bold", size = rel(1.1), hjust = 0),
        # Bold axis titles
        axis.title = element_text(face = "bold"),
        # Add some space above the x-axis title and make it left-aligned
        axis.title.x = element_text(margin = margin(t = 10), hjust = 0),
        # Add some space to the right of the y-axis title and make it top-aligned
        axis.title.y = element_text(margin = margin(r = 10), hjust = 1),
        strip.background = element_rect(fill = "grey90", color = NA),
        # Add a thin grey border around all the plots to tie in the facet titles
        panel.border = element_rect(color = "grey90", fill = NA))
}
```



You can then re-use it when needed:


```{r}
ggplot(drop_na(county_data), aes(x = per_dem_2016, fill = census_region)) + 
  geom_density() + 
  facet_wrap(vars(census_region)) + 
  scale_fill_paletteer_d(`"ghibli::KikiMedium"`) + 
  theme_heiss()
```


A better approach is to source in the custom function and then use `theme_set()` so that all plots are automatically given the same theme:


```{r, echo = TRUE, eval = FALSE}
# libraries
library(tidyverse)

# custom theme
source("theme_heiss.R")

# apply theme to all plots made in this script
theme_set(theme_heiss())

```

